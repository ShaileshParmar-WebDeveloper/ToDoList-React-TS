{"version":3,"sources":["component/Add.tsx","component/Display.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","margin","spacing","Add","inputTask","handleInput","handleSubmit","classes","className","noValidate","autoComplete","TextField","onChange","e","target","value","id","label","variant","required","Button","type","onClick","color","Display","tasks","deleteTask","length","map","task","Grid","container","direction","justify","alignItems","item","xs","IconButton","aria-label","getRandomInt","Math","floor","random","App","defaultTodos","useState","setTasks","setInputTask","errAlert","setErrAlert","Container","fixed","taskName","event","preventDefault","Alert","severity","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAGMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,SAmCbC,MAxBf,YAAkE,IAAnDC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,aAC/BC,EAAUV,IAChB,OACE,uBAAMW,UAAWD,EAAQP,KAAMS,YAAU,EAACC,aAAa,MAAvD,UACE,cAACC,EAAA,EAAD,CACEC,SAAU,SAACC,GAAD,OAAOR,EAAYQ,EAAEC,OAAOC,QACtCA,MAAOX,EACPY,GAAG,iBACHC,MAAM,gBACNC,QAAQ,WACRC,UAAQ,IAEV,cAACC,EAAA,EAAD,CACEC,KAAK,SACLC,QAAShB,EACTY,QAAQ,YACRK,MAAM,UAJR,qB,mCCWSC,MA/Bf,YAAuD,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,WACxB,OACE,qBAAKlB,UAAU,iBAAf,SACIiB,EAAME,OAGN,6BACGF,EAAMG,KAAI,gBAAGZ,EAAH,EAAGA,GAAIa,EAAP,EAAOA,KAAP,OACT,6BACE,eAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,gBACRC,WAAW,SACXC,MAAI,EACJC,GAAI,GANN,UASGP,EACD,cAACQ,EAAA,EAAD,CAAYf,QAAS,kBAAMI,EAAWV,IAAKsB,aAAW,SAAtD,SACE,cAAC,IAAD,QAJGtB,UAZb,4CCNR,SAASuB,IACP,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,MA+EhCE,MAvEf,WACE,IAAMC,EAA4B,CAChC,CACE5B,GAAIuB,IACJV,KAAM,OAER,CACEb,GAAIuB,IACJV,KAAM,SAER,CACEb,GAAIuB,IACJV,KAAM,QAER,CACEb,GAAIuB,IACJV,KAAM,WAhBG,EAoBagB,mBAASD,GApBtB,mBAoBNnB,EApBM,KAoBCqB,EApBD,OAqBqBD,mBAAS,IArB9B,mBAqBNzC,EArBM,KAqBK2C,EArBL,OAsBmBF,oBAAS,GAtB5B,mBAsBNG,EAtBM,KAsBIC,EAtBJ,KAsDb,OACE,eAACC,EAAA,EAAD,CAAW1C,UAAU,MAAM2C,OAAK,EAAhC,UACE,cAAC,EAAD,CACE/C,UAAWA,EACXC,YAXc,SAAC+C,GACnBL,EAAaK,GACTJ,GACFC,GAAY,IASV3C,aAnCe,SAAC+C,GACpBA,EAAMC,iBACDlD,GAIL0C,EAAS,GAAD,mBACHrB,GADG,CAEN,CACET,GAAIuB,IACJV,KAAMzB,MAGV2C,EAAa,KAVXE,GAAY,MAkCXD,GACC,cAACO,EAAA,EAAD,CAAOrC,QAAQ,WAAWV,UAAU,aAAagD,SAAS,QAA1D,2CAIF,cAAC,EAAD,CAAS/B,MAAOA,EAAOC,WAxBR,SAACV,GAClB8B,EAASrB,EAAMgC,QAAO,SAAC5B,GAAD,OAAUA,EAAKb,KAAOA,aC7CjC0C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bbe51d62.chunk.js","sourcesContent":["import { Button, makeStyles, TextField } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\ntype AddProps = {\r\n  inputTask: string;\r\n  handleInput: (input: string) => void;\r\n  handleSubmit: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n};\r\n\r\nfunction Add({ inputTask, handleInput, handleSubmit }: AddProps) {\r\n  const classes = useStyles();\r\n  return (\r\n    <form className={classes.root} noValidate autoComplete=\"off\">\r\n      <TextField\r\n        onChange={(e) => handleInput(e.target.value)}\r\n        value={inputTask}\r\n        id=\"outlined-basic\"\r\n        label=\"Add your Task\"\r\n        variant=\"outlined\"\r\n        required\r\n      />\r\n      <Button\r\n        type=\"submit\"\r\n        onClick={handleSubmit}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n      >\r\n        Add\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Add;\r\n","import { Grid, IconButton } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { Todo } from \"../App\";\r\n\r\ntype DisplayProps = {\r\n  tasks: Array<Todo>;\r\n  deleteTask: Function;\r\n};\r\n\r\nfunction Display({ tasks, deleteTask }: DisplayProps) {\r\n  return (\r\n    <div className=\"task_container\">\r\n      {!tasks.length ? (\r\n        <h2>No Task</h2>\r\n      ) : (\r\n        <ol>\r\n          {tasks.map(({ id, task }) => (\r\n            <li>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\"\r\n                item\r\n                xs={12}\r\n                key={id}\r\n              >\r\n                {task}\r\n                <IconButton onClick={() => deleteTask(id)} aria-label=\"delete\">\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n              </Grid>\r\n            </li>\r\n          ))}\r\n        </ol>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import { Container } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Add from \"./component/Add\";\nimport Display from \"./component/Display\";\n\nfunction getRandomInt() {\n  return Math.floor(Math.random() * Math.floor(1000000));\n}\n\nexport type Todo = {\n  id: number;\n  task: string;\n};\n\nfunction App() {\n  const defaultTodos: Array<Todo> = [\n    {\n      id: getRandomInt(),\n      task: \"Eat\",\n    },\n    {\n      id: getRandomInt(),\n      task: \"Sleep\",\n    },\n    {\n      id: getRandomInt(),\n      task: \"Code\",\n    },\n    {\n      id: getRandomInt(),\n      task: \"Repeat\",\n    },\n  ];\n\n  const [tasks, setTasks] = useState(defaultTodos);\n  const [inputTask, setInputTask] = useState(\"\");\n  const [errAlert, setErrAlert] = useState(false);\n\n  const handleSubmit = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (!inputTask) {\n      setErrAlert(true);\n      return;\n    }\n    setTasks([\n      ...tasks,\n      {\n        id: getRandomInt(),\n        task: inputTask,\n      },\n    ]);\n    setInputTask(\"\");\n  };\n\n  // Delete task\n\n  const deleteTask = (id: number) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  // handleInput\n  const handleInput = (taskName: string) => {\n    setInputTask(taskName);\n    if (errAlert) {\n      setErrAlert(false);\n    }\n  };\n\n  return (\n    <Container className=\"app\" fixed>\n      <Add\n        inputTask={inputTask}\n        handleInput={handleInput}\n        handleSubmit={handleSubmit}\n      />\n      {errAlert && (\n        <Alert variant=\"outlined\" className=\"alertclass\" severity=\"error\">\n          You can't leave inpute blank!\n        </Alert>\n      )}\n      <Display tasks={tasks} deleteTask={deleteTask} />\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}